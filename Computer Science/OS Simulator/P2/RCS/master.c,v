head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2016.02.12.07.17.15;	author o2-cho;	state Exp;
branches;
next	1.1;

1.1
date	2016.02.12.03.56.20;	author o2-cho;	state Exp;
branches;
next	;


desc
@initial
@


1.2
log
@done
@
text
@#include "master.h"

char msgerr[50] = "";			// string to hold the error messge and logging purpose
int childPid[maxChild] = { 0 };     
int ShmID;
ShmPTR_t *ShmPTR;     

int main (int argc, char *argv[]) {	
	system("clear");
	signal(SIGINT, signalHandler);
	int cpid, i, status;
	double delay = 0.0;
	
	// Initializing shared memory
	shmInit();
	
	// fork child
	for (i=0; i < maxChild; i++)  {
		delay = rand()%1 + 1;
		usleep(1000000*delay);
		forkChild(i);
	}
	
	// Parent waits for all the children to terminate
   for (i=0; i < maxChild; i++) {
      cpid = wait(&status);
   }
}

// Setting up shared memory
void shmInit () {
	key_t ShmKEY = ftok(".", 40);
	ShmID = shmget(ShmKEY, IPCD_SZ, 0666|IPC_CREAT);
	if (ShmID == -1) {
		perror("Failed to create shared memory segment");
        exit(1);
	}
	
	if (!(ShmPTR = (ShmPTR_t *)(shmat(ShmID, 0, 0)))) {
		perror("Failed to attach shared memory segment");
        exit(1);
    }
	sprintf(msgerr, "Shared memory attached");
	writeLog(msgerr);
}

// Forking Child Function
void forkChild(int child) {
    char childArg[5] = "";                        // String to hold child argument
    if ((childPid[child] = fork()) < 0) {
        sprintf(msgerr, "fork() for child %02d failed", child);
        writeLog(msgerr);
		perror(msgerr);
        cleanUp(SIGTERM);
        exit(1);
    } else {
        if (childPid[child] == 0) {
            sprintf(childArg, "%02d", child);
            sprintf(msgerr, "exec child %02d after fork", child);
			writeLog(msgerr);
            execl("./slave", "slave", childArg, (char *)NULL);
			printf ("EXEC Failed\n");
        }
    }
    return;
}

// Kill processes and remove the shared memeory
void cleanUp(int signo) {
    int i;
	for (i=0; i < maxChild; i++) 
		kill(childPid[i], signo);
	
    if ((shmctl(ShmID, IPC_RMID, 0) == -1) && (errno != EINTR)) {
        sprintf(msgerr, "Shared memory removed");
		writeLog(msgerr);
        perror(msgerr);
    }
    return;
}

// Log writing function
void writeLog(char *msg) {
    FILE *fp;
    if (!(fp = fopen("master.log", "a"))) {
        perror("Master: failed to open master.log");
        exit(1);
    }
    time_t now;
    struct tm *timeinfo;
    time(&now);
    timeinfo = localtime(&now);
	
    fprintf(fp, "%02d:%02d:%02d\t", timeinfo->tm_hour, timeinfo->tm_min, timeinfo->tm_sec);
    fprintf(fp, "Master:\t%s\n", msg);
    fclose(fp);
}

// Inturrupt handler
void signalHandler(int signo) {
	if (signo == SIGINT)
		fprintf(stderr,"\nDying because of the inturrupt\n");

	int i;
	for (i=0; i < 20; i++) 
		kill(childPid[i], signo);
	shmctl(ShmID, IPC_RMID,  0);
	exit(1);
}@


1.1
log
@Initial revision
@
text
@d1 12
a12 1
int main  () {
d14 95
@
