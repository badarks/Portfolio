head	1.4;
access;
symbols;
locks
	o2-cho:1.4; strict;
comment	@ * @;


1.4
date	2016.04.29.17.45.37;	author o2-cho;	state Exp;
branches;
next	1.3;

1.3
date	2016.04.29.03.14.46;	author o2-cho;	state Exp;
branches;
next	1.2;

1.2
date	2016.04.23.15.45.42;	author o2-cho;	state Exp;
branches;
next	1.1;

1.1
date	2016.04.19.17.51.43;	author o2-cho;	state Exp;
branches;
next	;


desc
@Initial skeleton program
@


1.4
log
@All working without 2nd chance algorithm
@
text
@// RCS DATA AT BOTTOM OF FILE

#include <stdio.h>                               // printf(), etc.
#include <stdlib.h>                              // exit()
#include <errno.h>                               // perror()
#include <sys/sem.h>                             // Semaphores

#include "sigcheck.h"                            // Signal processing

#ifndef _WL_INCLD                                // Check to see if writelog.h has already been included
    #include "writelog.h"                        // Log writer
    #define _WL_INCLD
#endif

#define DEBUGS 0                                 // Enable debugging = 1

// Semaphore operation function
void sem_op(int op, int semid, char *procname) {

    // op = -1 = wait, op = 1 = signal

    char msgerr[50] = "";                        // Hold a message to be passed to perror() or writelog()
    int signum;                                  // Hold a signal ID

    sprintf(msgerr, "sem_op (%d) called for semid %d, value is %d", op, semid, semctl(semid, 0, GETVAL));
    //writelog(msgerr, procname);
    if (DEBUGS) printf("%s: %s\n", procname, msgerr);

    struct sembuf sbuf;                          // Semaphore operation struct
    sbuf.sem_num = 0;                            // First (and only) semaphore in set
    sbuf.sem_op = op;                            // Increment/Decrement the semaphore
    sbuf.sem_flg = 0;                            // Operation flag
    if (semop(semid, &sbuf, 1) == -1)  {
        if (errno == EINTR) {
            // A signal was received, check it
            if ( ( signum = sigcheck(procname) ) ) {
                sprintf(msgerr, "Received signal %d - exiting...", signum);
                writelog(msgerr, procname);
                exit(0);
            }
        } else {
            sprintf(msgerr, "%s: sem_op (%d)->semop (semid: %d)", procname, op, semid);
            perror(msgerr);
            exit(1);
        }
    }

    sprintf(msgerr, "semid %d value has been updated to %d", semid, semctl(semid, 0, GETVAL));
    //writelog(msgerr, procname);
    if (DEBUGS) printf("%s: %s\n", procname, msgerr);

    return;
}



// RCS information:
// $Author: o2-cho $
// $Date: 2016/04/29 03:14:46 $
// $RCSfile: semops.c,v $
// $Log: semops.c,v $
// Revision 1.3  2016/04/29 03:14:46  o2-cho
// Many bug fixes
//
// Revision 1.2  2016/04/23 15:45:42  o2-cho
// Child cleanup bug fixed
// Logging and debugging statements updated
//
// Revision 1.1  2016/04/19 17:51:43  o2-cho
// Initial revision
//
@


1.3
log
@Many bug fixes
@
text
@d48 4
d59 1
a59 1
// $Date: 2016/04/23 15:45:42 $
d62 3
@


1.2
log
@Child cleanup bug fixed
Logging and debugging statements updated
@
text
@d3 10
a12 10
#include <stdio.h>								// printf(), etc.
#include <stdlib.h>								// exit()
#include <errno.h>								// perror()
#include <sys/sem.h>							// Semaphores

#include "sigcheck.h"							// Signal processing

#ifndef _WL_INCLD								// Check to see if writelog.h has already been included
	#include "writelog.h"						// Log writer
	#define _WL_INCLD
d15 1
a15 1
#define DEBUGS 0								// Enable debugging = 1
d20 1
a20 1
	// op = -1 = wait, op = 1 = signal
d22 2
a23 2
	char msgerr[50] = "";						// Hold a message to be passed to perror() or writelog()
	int signum;									// Hold a signal ID
d25 22
a46 22
	sprintf(msgerr, "sem_op (%d) called for semid %d, value is %d", op, semid, semctl(semid, 0, GETVAL));
	//writelog(msgerr, procname);
	if (DEBUGS) printf("%s: %s\n", procname, msgerr);

	struct sembuf sbuf;							// Semaphore operation struct
	sbuf.sem_num = 0;							// First (and only) semaphore in set
	sbuf.sem_op = op;							// Increment/Decrement the semaphore
	sbuf.sem_flg = 0;							// Operation flag
	if (semop(semid, &sbuf, 1) == -1)  {
		if (errno == EINTR) {
			// A signal was received, check it
			if ( ( signum = sigcheck(procname) ) ) {
				sprintf(msgerr, "Received signal %d - exiting...", signum);
				writelog(msgerr, procname);
				exit(0);
			}
		} else {
			sprintf(msgerr, "%s: sem_op (%d)->semop (semid: %d)", procname, op, semid);
			perror(msgerr);
			exit(1);
		}
	}
d48 1
a48 1
	return;
d55 1
a55 1
// $Date: 2016/04/19 17:51:43 $
d58 4
@


1.1
log
@Initial revision
@
text
@d26 1
a26 1
	writelog(msgerr, procname);
d54 7
a60 4
// $Author:  $
// $Date:  $
// $RCSfile:  $
// $Log:  $
@
