CLASS: 
	CS 4760 - Operating System
	
DATE:
	3/9/16

NOTE:
	log file from the child is saved in 'cstest' file
	log file from the parent is saved in master.log
	
STUDENT:
	Kyu S Cho
	ksc5c7@mail.umsl.edu

FILE LIST:
	master.c
	common.c
	slave.c
	master.h
	common.h
	slave.h
	makefile
	RCS
	README

EXECUTABLE NAME:
	master.

TO EXECUTE:
	1.	Execute "make clean" to remove object files and log files
	2. Execute master -[arg]
		-h 		// display the menu option
		-t n 		// set a max time	(default 10)
		-s n 		// set a max number of slaves (default 19)

	DESCRIPTION:
			Semaphores and Message Passing
			
The goal of this homework is to become familiar with semaphores in the Unix operating system. Do the same project
as Assignment 2, except that now, you use a monitor to control access to critical resources.
You can get a good feel by first architecting the project in a way to be solved by monitor. Towards that effect, create
pseudocode that will allow you to execute the critical section problem independently, that is, without the entry and
exit section. This function will be passed to the monitor which will ensure that only one process is actually executing
inside its critical section (or inside the monitor).
After that, you figure out how to implement the monitor, this time using the semaphores as illustrated in the notes,
and do it as a library. This library will take any function to execute but ensure that only one process will execute
inside the monitor.
Make sure that you have signal handing to terminate all processes, if needed. In case of abnormal termination, make
sure to remove shared memory and semaphores as well. Use semget(2), semctl(2), and semop(2) to implement
monitor.
Your monitor should receive the names of functions passed as parameters. Since different functions are required to
access the critical resource, passing the functions as parameters will prove a clean option.